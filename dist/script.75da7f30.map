{"version":3,"sources":["dice.js","stats.js","entity.js","getStats.js","script.js"],"names":["rollDie","sides","Math","floor","random","rollDice","quantity","total","i","heroStats","name","health","attack","defend","stamina","speed","monsterStats","Entity","damage","getStats","sample","blowsLanded","blowsBlocked","result","battle","takeTurn","hero","monster","console","log","model","fighters","view","display","document","querySelector","messageBoard","init","clear","forEach","fighter","playerBoard","createElement","className","appendChild","renderPlayer","entity","stats","innerHTML","broadcast","message","messageNode","element","controller","messages","attacker","defender","outcome","nextFighter","update","currentOrder","reverse","window","onload","GetStats"],"mappings":"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","file":"script.75da7f30.map","sourceRoot":"..","sourcesContent":["const rollDie = (sides) => {\n  return Math.floor(Math.random() * sides) + 1;\n};\n\nconst rollDice = (sides, quantity) => {\n  let total = 0;\n  for (let i = 0; i < quantity; i++) {\n    total += rollDie(sides)\n  };\n  return total;\n};\n\nexport default rollDice;","import rollDice from \"./dice\";\n\nexport const heroStats = {\n  name: \"Link\",\n  health: rollDice(6, 1),\n  attack: rollDice(6, 1),\n  defend: rollDice(6, 1),\n  stamina: rollDice(6, 1),\n  speed: rollDice(6, 1)\n};\n\nexport const monsterStats = {\n  name: \"Ganon\",\n  health: rollDice(6, 1),\n  attack: rollDice(6, 1),\n  defend: rollDice(6, 1),\n  stamina: rollDice(6, 1),\n  speed: rollDice(6, 1)\n};","export default class Entity {\n  constructor({ name, health, attack, defend, stamina, speed }) {\n    this.name = name;\n    this.health = health;\n    this.attack = attack;\n    this.defend = defend;\n    this.stamina = stamina;\n    this.speed = speed;\n  }\n  takeDamage(damage) {\n    this.health -= damage;\n  }\n};","export default function getStats(sample) {\n  let blowsLanded = 0;\n  let blowsBlocked = 0;\n  let result;\n  for (let i = 0; i < sample; i++) {\n    const result = battle.takeTurn(hero, monster);\n    switch (result) {\n      case result[0] > result[1]:\n      blowsLanded++;\n      break;\n      case result[1] > result[0]:\n      blowsBlocked++;\n      break;\n      default:\n      null;\n    }\n  };\n  console.log(`hero: ${blowsLanded} monster: ${blowsBlocked}`);\n};\n","import { heroStats, monsterStats } from \"./stats\";\nimport Entity from \"./entity\";\nimport GetStats from \"./getStats\";\nimport rollDice from \"./dice\";\n\nconst model = {\n  fighters: [],\n}\n\nconst view = {\n  display: document.querySelector(\".display\"),\n  messageBoard: document.querySelector(\".messageBoard\"),\n\n  init() {\n    this.clear(this.display);\n    // add divs for fighter stats\n    model.fighters.forEach(\n      fighter => {\n        const playerBoard = document.createElement(\"div\");\n        playerBoard.className = fighter.name;\n        this.display.appendChild(playerBoard);\n        //...and add their info\n        this.renderPlayer(fighter);\n      }\n    );\n  },\n\n  renderPlayer(entity) {\n    const playerBoard = document.querySelector(`.${entity.name}`);\n    let stats = `\n      <h3>${entity.name}</h3>\n      <p>HP: ${entity.health}</p>\n      <p>AT: ${entity.attack}</p>\n      <p>DF: ${entity.defend}</p>\n      <p>SP: ${entity.speed}</p>\n      <p>ST: ${entity.stamina}</p>\n    `;\n    playerBoard.innerHTML = stats;\n  },\n\n  broadcast(message) {\n    let messageNode = `\n      <p class=\"fade-off\">\n        ${message}\n      </p>\n    `\n    this.messageBoard.innerHTML = messageNode;\n  },\n  clear(element) {\n    element.innerHTML = \"\";\n  }\n}\n\nconst controller = {\n  init() {\n    const hero = new Entity(heroStats);\n    const monster = new Entity(monsterStats);\n    model.fighters = [hero, monster];\n    view.init();\n  },\n\n  attack() {\n    let messages = [\n      \"<h3 class='fade-off'>attack fails!</h3>\",\n      \"<h3 class='fade-off'>attack successful!</h3>\"\n    ];\n    let [attacker, defender] = model.fighters;\n    let attack = attacker.attack + rollDice(6, 2);\n    let defend = defender.defend + rollDice(6, 1);\n    let outcome = attack >= defend ? 1 : 0;\n    defender.health -= outcome;\n    view.renderPlayer(defender);\n    view.broadcast(`\n      <p class=\"fade-off\">\n        ${attacker.name} attacks (${attack}) - ${defender.name} defends (${defend})\n      </p>   \n        ${messages[outcome]}\n    `);\n    this.nextFighter();\n    this.update();\n  },\n  nextFighter() {\n    console.log(model.fighters);\n    const currentOrder = model.fighters;\n    currentOrder.reverse();\n    console.log(model.fighters);\n  },\n  update() {\n    model.fighters.forEach(fighter => {\n      if (fighter.health === 0) {\n        view.broadcast(`\n          <h2>\n            ${fighter.name} IS DEAD! </br> GAME OVER\n          </h2>\n          <button onclick=\"location.reload()\">reset</button>\n        `);\n      };\n    })\n  }\n}\n\nwindow.onload = controller.init();\nwindow.controller = controller;\nwindow.GetStats = GetStats;\nwindow.model = model;\nwindow.view = view;"]}