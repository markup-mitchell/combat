{"version":3,"sources":["dice.js","stats.js","entity.js","getStats.js","script.js"],"names":["rollDice","rollDie","sides","Math","floor","random","quantity","total","i","heroStats","name","health","attack","defend","stamina","speed","monsterStats","Entity","damage","getStats","sample","blowsLanded","blowsBlocked","result","battle","takeTurn","hero","monster","console","log","model","turn","fighters","view","display","document","querySelector","messageBoard","init","clear","forEach","fighter","playerBoard","createElement","className","appendChild","renderPlayer","entity","stats","innerHTML","broadcast","message","messageNode","element","controller","window","onload","GetStats"],"mappings":";AAYeA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAZf,IAAMC,EAAU,SAACC,GACRC,OAAAA,KAAKC,MAAMD,KAAKE,SAAWH,GAAS,GAGvCF,EAAW,SAACE,EAAOI,GAElB,IADDC,IAAAA,EAAQ,EACHC,EAAI,EAAGA,EAAIF,EAAUE,IAC5BD,GAASN,EAAQC,GAEZK,OAAAA,GAGMP,EAAAA,EAAAA,QAAAA,QAAAA;;ACDR,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,QAAA,eAAA,EAXP,IAAA,EAAA,EAAA,QAAA,WAWO,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GATA,IAAMS,EAAY,CACvBC,KAAM,OACNC,QAAQ,EAAS,EAAA,SAAA,EAAG,GACpBC,QAAQ,EAAS,EAAA,SAAA,EAAG,GACpBC,QAAQ,EAAS,EAAA,SAAA,EAAG,GACpBC,SAAS,EAAS,EAAA,SAAA,EAAG,GACrBC,OAAO,EAAS,EAAA,SAAA,EAAG,IAGd,QAAA,UAAA,EAAA,IAAMC,EAAe,CAC1BN,KAAM,QACNC,QAAQ,EAAS,EAAA,SAAA,EAAG,GACpBC,QAAQ,EAAS,EAAA,SAAA,EAAG,GACpBC,QAAQ,EAAS,EAAA,SAAA,EAAG,GACpBC,SAAS,EAAS,EAAA,SAAA,EAAG,GACrBC,OAAO,EAAS,EAAA,SAAA,EAAG,IANd,QAAA,aAAA;;ACCN,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAZoBE,IAAAA,EAYpB,WAX+D,SAAA,EAAA,GAAhDP,IAAAA,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,QAASC,EAAAA,EAAAA,MAAS,EAAA,KAAA,GACvDL,KAAAA,KAAOA,EACPC,KAAAA,OAASA,EACTC,KAAAA,OAASA,EACTC,KAAAA,OAASA,EACTC,KAAAA,QAAUA,EACVC,KAAAA,MAAQA,EAKhB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,aAHYG,MAAAA,SAAAA,GACJP,KAAAA,QAAUO,MAElB,EAAA,GAAA,QAAA,QAAA;;ACMA,aAlBc,SAASC,EAASC,GAI1B,IAHDC,IAAAA,EAAc,EACdC,EAAe,EAEVd,EAAI,EAAGA,EAAIY,EAAQZ,IAAK,CACzBe,IAAAA,EAASC,OAAOC,SAASC,KAAMC,SAC7BJ,OAAAA,GACDA,KAAAA,EAAO,GAAKA,EAAO,GACxBF,IACA,MACKE,KAAAA,EAAO,GAAKA,EAAO,GACxBD,KAMJM,QAAQC,IAAaR,SAAAA,OAAAA,EAAwBC,cAAAA,OAAAA,IAC9C,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;AC+CD,aAjEA,IAAA,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,aACA,EAAA,EAAA,QAAA,eA+DA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA7DA,IAAMQ,EAAQ,CACZC,KAAM,EACNC,SAAU,IAGNC,EAAO,CACXC,QAASC,SAASC,cAAc,YAChCC,aAAcF,SAASC,cAAc,iBAErCE,KAAO,WAAA,IAAA,EAAA,KACAC,KAAAA,MAAM,KAAKL,SAEhBJ,EAAME,SAASQ,QACb,SAAAC,GACQC,IAAAA,EAAcP,SAASQ,cAAc,OAC3CD,EAAYE,UAAYH,EAAQ/B,KAChC,EAAKwB,QAAQW,YAAYH,GAEzB,EAAKI,aAAaL,MAKxBK,aAAaC,SAAAA,GACLL,IAAAA,EAAcP,SAASC,cAAkBW,IAAAA,OAAAA,EAAOrC,OAClDsC,EACID,eAAAA,OAAAA,EAAOrC,KACJqC,wBAAAA,OAAAA,EAAOpC,OACPoC,uBAAAA,OAAAA,EAAOnC,OACPmC,uBAAAA,OAAAA,EAAOlC,OACPkC,uBAAAA,OAAAA,EAAOhC,MACPgC,uBAAAA,OAAAA,EAAOjC,QANlB,cAQA4B,EAAYO,UAAYD,GAG1BE,UAAUC,SAAAA,GACJC,IAAAA,EAEED,yCAAAA,OAAAA,EAFN,sBAKKd,KAAAA,aAAaY,UAAYG,GAEhCb,MAAMc,SAAAA,GACJA,EAAQJ,UAAU,KAIhBK,EAAa,CACjBhB,KAAO,WACCZ,IAAAA,EAAO,IAAIT,EAAJ,QAAWR,EAAX,WACPkB,EAAU,IAAIV,EAAJ,QAAWD,EAAX,cAChBc,EAAME,SAAW,CAACN,EAAMC,GACxBM,EAAKK,SAITiB,OAAOC,OAASF,EAAWhB,OAC3BiB,OAAOE,SAAWA,EAAlB,QACAF,OAAOzB,MAAQA,EACfyB,OAAOtB,KAAOA","file":"script.c5d2cfe4.map","sourceRoot":"..","sourcesContent":["const rollDie = (sides) => {\n  return Math.floor(Math.random() * sides) + 1;\n};\n\nconst rollDice = (sides, quantity) => {\n  let total = 0;\n  for (let i = 0; i < quantity; i++) {\n    total += rollDie(sides)\n  };\n  return total;\n};\n\nexport default rollDice;","import rollDice from \"./dice\";\n\nexport const heroStats = {\n  name: \"Link\",\n  health: rollDice(6, 1),\n  attack: rollDice(6, 1),\n  defend: rollDice(6, 1),\n  stamina: rollDice(6, 1),\n  speed: rollDice(6, 1)\n};\n\nexport const monsterStats = {\n  name: \"Ganon\",\n  health: rollDice(6, 1),\n  attack: rollDice(6, 1),\n  defend: rollDice(6, 1),\n  stamina: rollDice(6, 1),\n  speed: rollDice(6, 1)\n};","export default class Entity {\n  constructor({ name, health, attack, defend, stamina, speed }) {\n    this.name = name;\n    this.health = health;\n    this.attack = attack;\n    this.defend = defend;\n    this.stamina = stamina;\n    this.speed = speed;\n  }\n  takeDamage(damage) {\n    this.health -= damage;\n  }\n};","export default function getStats(sample) {\n  let blowsLanded = 0;\n  let blowsBlocked = 0;\n  let result;\n  for (let i = 0; i < sample; i++) {\n    const result = battle.takeTurn(hero, monster);\n    switch (result) {\n      case result[0] > result[1]:\n      blowsLanded++;\n      break;\n      case result[1] > result[0]:\n      blowsBlocked++;\n      break;\n      default:\n      null;\n    }\n  };\n  console.log(`hero: ${blowsLanded} monster: ${blowsBlocked}`);\n};\n","import { heroStats, monsterStats } from \"./stats\";\nimport Entity from \"./entity\";\nimport GetStats from \"./getStats\";\n\nconst model = {\n  turn: 0,\n  fighters: [],\n}\n\nconst view = {\n  display: document.querySelector(\".display\"),\n  messageBoard: document.querySelector(\".messageBoard\"),\n  \n  init() {\n    this.clear(this.display);\n    // add divs for fighter stats\n    model.fighters.forEach(\n      fighter => {\n        const playerBoard = document.createElement(\"div\");\n        playerBoard.className = fighter.name;\n        this.display.appendChild(playerBoard);\n        //...and add their info\n        this.renderPlayer(fighter);\n      }\n    );\n  },\n\n  renderPlayer(entity) {\n    const playerBoard = document.querySelector(`.${entity.name}`);\n    let stats = `\n      <h3>${entity.name}</h3>\n      <p>HP: ${entity.health}</p>\n      <p>AT: ${entity.attack}</p>\n      <p>DF: ${entity.defend}</p>\n      <p>SP: ${entity.speed}</p>\n      <p>ST: ${entity.stamina}</p>\n    `;\n    playerBoard.innerHTML = stats;\n  },\n\n  broadcast(message) {\n    let messageNode = `\n      <p class=\"fade-off\">\n        ${message}\n      </p>\n    `\n    this.messageBoard.innerHTML = messageNode;\n  },\n  clear(element) {\n    element.innerHTML=\"\";\n  }\n}\n\nconst controller = {\n  init() {\n    const hero = new Entity(heroStats);\n    const monster = new Entity(monsterStats);\n    model.fighters = [hero, monster];\n    view.init();\n  }\n}\n\nwindow.onload = controller.init();\nwindow.GetStats = GetStats;\nwindow.model = model;\nwindow.view = view;"]}